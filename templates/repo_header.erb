#!/bin/sh
#
CMD=$1
#
# Setting this, so the repo does not need to be given on the commandline:
export BORG_REPO=<%= @target %>

# get the backup host, if there is none we expect ''
BACKUP_HOST=`echo $BORG_REPO|sed -e 's/^.*\@\(.*\)\:.*$/\1/;tx;d;:x'`

<% @_env_vars.each do | key, val| -%>
export <%= key %>='<%= val %>'
<% end -%>

# check if backup host is reachable, if not return an icinga/nagios compatible warning (exit 1)
if [ "$BACKUP_HOST" != '' ]; then
  ssh  -o PasswordAuthentication=no -o PubkeyAuthentication=no -o ConnectTimeout=5  $BACKUP_HOST  2>&1 |grep 'Permission denied' > /dev/null
  if [ $? -ne 0 ]; then
    echo "WARNING - backup host ($BACKUP_HOST) not reachable"
    exit 1
  fi
fi

<% if @_passphrase != '' -%>
# Setting this, so you won't be asked for your repository passphrase:
export BORG_PASSPHRASE='<%= @_passphrase %>'
<% end -%>

<% if @_passcommand != '' -%>
# or this to ask an external program to supply the passphrase. this only works for borgbackup > 1.0.9
if [ `borgbackup --version |awk -F' ' '{print $2 " 1.0.9"}'|tr ' ' "\n"|sort -V|tail -1` =  '1.0.9' ]; then
  export BORG_PASSPHRASE=`<%= @_passcommand -%>`
else
  export BORG_PASSCOMMAND='<%= @_passcommand -%>'
fi
<% end -%>

# to initialize the repo
if [ "$CMD" = 'init' ]; then
    borg init \
<% if @apend_only -%>
         --append-only \
<% end -%>
<% if @storage_quota != '' -%>
         --storage-quota <%= @storage_quota %> \
<% end -%>
    --encryption <%= @encryption %>
  exit $?
fi

# to check the repo
if [ "$CMD" = 'check' ]; then
  borg check -v --info
  exit $?
fi

# to list the repo
if [ "$CMD" = 'list' ]; then
  borg list
  exit $?
fi

# to check the repo and output icinga/nagios result
# as a second parameter you can give an archive name used as prefix
if [ "$CMD" = 'check_icinga' ]; then
  # check age:
  if [ "$2" = '' ]; then
    last=`borg list |sort |tail -1|sed -e 's/^.*,//' -e 's/ \[.*\]$//'`
  else
    last=`borg list --prefix "{hostname}-$2"|sort |tail -1|sed -e 's/^.*,//' -e 's/ \[.*\]$//'`
  fi
  if [ "$last" = '' ]; then
    echo "WARNING - no backup yet"
    exit 1
  fi
  age=`echo $(date +%s),$(date -d"$last" +%s)|awk -F',' '{print ($1 -$2)}'`
  if [ $age -gt 90000 ]; then
    echo "WARNING - backup is old ($last)"
    exit 1
  else
    echo "OK - backup is recent ($last)"
    exit 0
  fi
fi

# to print the keyfile to stdout
if [ "$CMD" = 'exportkey' ]; then
  borg key export :: /dev/stdout
fi

# the rest should only run if we give the 'run' command
# this lets us source this script for setting the correct environment
if [ "$CMD" != 'run' ]; then
  return
fi

# some helpers and error handling:
info() { printf "\n%s %s\n\n" "$( date )" "$*"; }
trap 'echo $( date ) Backup interrupted >&2; exit 2' INT TERM

info "Starting backup"
